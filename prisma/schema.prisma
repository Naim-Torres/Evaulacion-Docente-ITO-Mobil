generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  password              String?
  name                  String?
  role                  String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  school_worker_profile SchoolWorker?
  student_profile       Student?
}

model Student {
  id         String       @id @default(cuid())
  no_control String       @unique
  semester   String?
  id_user    String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Course     Course[]
  evaluation Evaluation[]
  user       User         @relation(fields: [id_user], references: [id])
}

model SchoolWorker {
  id            String       @id @default(cuid())
  id_department String
  id_user       String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Course        Course[]
  evaluation    Evaluation[]
  department    Department   @relation(fields: [id_department], references: [id])
  user          User         @relation(fields: [id_user], references: [id])
}

model Department {
  id           String         @id @default(cuid())
  name         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  SchoolWorker SchoolWorker[]
}

model Subject {
  id         String       @id @default(cuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Course     Course[]
  Evaluation Evaluation[]
}

model Course {
  id               String       @id @default(cuid())
  id_school_worker String
  id_student       String?
  id_subject       String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  key              String
  school_worker    SchoolWorker @relation(fields: [id_school_worker], references: [id])
  student          Student?     @relation(fields: [id_student], references: [id])
  subject          Subject      @relation(fields: [id_subject], references: [id])
}

model Evaluation {
  id               String       @id @default(cuid())
  evaluation       String
  id_school_worker String
  id_student       String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  id_subject       String?
  average          Float?
  school_worker    SchoolWorker @relation(fields: [id_school_worker], references: [id])
  student          Student      @relation(fields: [id_student], references: [id])
  Subject          Subject?     @relation(fields: [id_subject], references: [id])
}

model QuestionList {
  id        String   @id @default(cuid())
  question  String   @unique
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ciclo {
  id          Int      @id @default(autoincrement())
  nombre      String
  fechaInicio DateTime
  fechaFin    DateTime
  estado      String   @default("PENDIENTE")
  tipo        String
  fases       Fase[]

  @@map("ciclos")
}

model Fase {
  id          Int      @id @default(autoincrement())
  nombre      String
  fechaInicio DateTime
  fechaFin    DateTime
  estado      String   @default("PENDIENTE")
  tipo        String
  cicloId     Int
  ciclo       Ciclo    @relation(fields: [cicloId], references: [id])

  @@map("fases")
}
